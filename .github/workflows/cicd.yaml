name: github-action-test-api

on:
  push:
    branches:
      - master
      - dev

jobs:
  build:
    runs-on: ubuntu-latest # github actions 실행 가상환경 설정
    steps:
      - name: Check out Repository
        uses: actions/checkout@v3

      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '8'

      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build
        run: ./gradlew clean build

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/dev'

    steps:
      - name: Deploy Master-01
        if: github.ref == 'refs/heads/master'
        env:
          IP: ${{ secrets.PROD_01_IP }}
          PORT: ${{ secrets.PROD_01_PORT }}
          USERNAME: ${{ secrets.PROD_USERNAME }}
          PASSWORD: ${{ secrets.PROD_PASSWORD }}
        run: |
          sudo apt-get install -y sshpass 
          sshpass -p "PASSWORD" scp -o StrictHostKeyChecking=no -P "$PORT" build/libs/*.jar "$USERNAME@$IP:/data/application/"
          sshpass -p "$PASSWORD" ssh -o StrictHostKeyChecking=no -p "$PORT" "$USERNAME@$IP" "cd /home/od/application && ./service.sh stop"
          sleep 2
          sshpass -p "$PASSWORD" ssh -o StrictHostKeyChecking=no -p "$PORT" "$USERNAME@$IP" "cd /home/od/application && ./service.sh start"
          sleep 10

      - name: Deploy Dev
        if: github.ref == 'refs/heads/dev'
        env:
          IP: ${{ secrets.DEV_IP }}
          PORT: ${{ secrets.DEV_PORT }}
          USERNAME: ${{ secrets.DEV_USERNAME }}
          PASSWORD: ${{ secrets.DEV_PASSWORD }}
        run: |
          sudo apt-get install -y sshpass 
          sshpass -p "PASSWORD" scp -o StrictHostKeyChecking=no -P "$PORT" build/libs/*.jar "$USERNAME@$IP:/data/application/"
          sshpass -p "$PASSWORD" ssh -o StrictHostKeyChecking=no -p "$PORT" "$USERNAME@$IP" "cd /home/od/application && ./service.sh stop"
          sleep 2
          sshpass -p "$PASSWORD" ssh -o StrictHostKeyChecking=no -p "$PORT" "$USERNAME@$IP" "cd /home/od/application && ./service.sh start"
          sleep 10

      - name: Service Check Master-01
        if: github.ref == 'refs/heads/master'
        env:
          IP: ${{ secrets.PROD_01_IP }}
          PORT: ${{ secrets.PROD_01_PORT }}
          USERNAME: ${{ secrets.PROD_USERNAME }}
          PASSWORD: ${{ secrets.PROD_PASSWORD }}
        run: |
          response_code=$(sshpass -p "$PASSWORD" ssh -o StrictHostKeyChecking=no -p "$PORT" "$USERNAME@$IP" "curl -s -o /dev/null -w '%{http_code}' http://localhost:9091/startUp")
          if [ "$response_code" -eq 200 ]; then
            echo "API responded with 200 OK"
          else
            echo "API did not respond with 200, response code: $response_code"
            exit 1
          fi

      - name: Service Check Dev
        if: github.ref == 'refs/heads/dev'
        env:
          IP: ${{ secrets.PROD_01_IP }}
          PORT: ${{ secrets.PROD_01_PORT }}
          USERNAME: ${{ secrets.PROD_USERNAME }}
          PASSWORD: ${{ secrets.PROD_PASSWORD }}
        run: |
          response_code=$(sshpass -p "$PASSWORD" ssh -o StrictHostKeyChecking=no -p "$PORT" "$USERNAME@$IP" "curl -s -o /dev/null -w '%{http_code}' http://localhost:9091/startUp")
          if [ "$response_code" -eq 200 ]; then
            echo "API responded with 200 OK"
          else
            echo "API did not respond with 200, response code: $response_code"
            exit 1
          fi

      - name: Notify Slack on Failure
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{
            "text": "Deployment failed on branch: ${{ github.ref }}. Please check the logs."
          }' ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on Success
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{
            "text": "Deployment succeeded on branch: ${{ github.ref }}. All steps completed successfully."
          }' ${{ secrets.SLACK_WEBHOOK_URL }}